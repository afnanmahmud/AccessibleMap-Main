{"ast":null,"code":"/**\n * @module ol/render/canvas/Executor\n */\nimport { equals } from '../../array.js';\nimport { createEmpty, createOrUpdate, intersects } from '../../extent.js';\nimport { lineStringLength } from '../../geom/flat/length.js';\nimport { drawTextOnPath } from '../../geom/flat/textpath.js';\nimport { transform2D } from '../../geom/flat/transform.js';\nimport { apply as applyTransform, compose as composeTransform, create as createTransform, setFromArray as transformSetFromArray } from '../../transform.js';\nimport ZIndexContext from '../canvas/ZIndexContext.js';\nimport { defaultPadding, defaultTextAlign, defaultTextBaseline, drawImageOrLabel, getTextDimensions, measureAndCacheTextWidth } from '../canvas.js';\nimport CanvasInstruction from './Instruction.js';\nimport { TEXT_ALIGN } from './TextBuilder.js';\n\n/**\n * @typedef {import('../../structs/RBush.js').Entry<import('../../Feature.js').FeatureLike>} DeclutterEntry\n */\n\n/**\n * @typedef {Object} ImageOrLabelDimensions\n * @property {number} drawImageX DrawImageX.\n * @property {number} drawImageY DrawImageY.\n * @property {number} drawImageW DrawImageW.\n * @property {number} drawImageH DrawImageH.\n * @property {number} originX OriginX.\n * @property {number} originY OriginY.\n * @property {Array<number>} scale Scale.\n * @property {DeclutterEntry} declutterBox DeclutterBox.\n * @property {import(\"../../transform.js\").Transform} canvasTransform CanvasTransform.\n */\n\n/**\n * @typedef {{0: CanvasRenderingContext2D, 1: import('../../size.js').Size, 2: import(\"../canvas.js\").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement, 3: ImageOrLabelDimensions, 4: number, 5: Array<*>, 6: Array<*>}} ReplayImageOrLabelArgs\n */\n\n/**\n * @template T\n * @typedef {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default, import(\"../../style/Style.js\").DeclutterMode): T} FeatureCallback\n */\n\n/**\n * @type {import(\"../../extent.js\").Extent}\n */\nconst tmpExtent = createEmpty();\n\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nconst p1 = [];\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nconst p2 = [];\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nconst p3 = [];\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nconst p4 = [];\n\n/**\n * @param {ReplayImageOrLabelArgs} replayImageOrLabelArgs Arguments to replayImageOrLabel\n * @return {DeclutterEntry} Declutter rbush entry.\n */\nfunction getDeclutterBox(replayImageOrLabelArgs) {\n  return replayImageOrLabelArgs[3].declutterBox;\n}\nconst rtlRegEx = new RegExp(/* eslint-disable prettier/prettier */\n'[' + String.fromCharCode(0x00591) + '-' + String.fromCharCode(0x008ff) + String.fromCharCode(0x0fb1d) + '-' + String.fromCharCode(0x0fdff) + String.fromCharCode(0x0fe70) + '-' + String.fromCharCode(0x0fefc) + String.fromCharCode(0x10800) + '-' + String.fromCharCode(0x10fff) + String.fromCharCode(0x1e800) + '-' + String.fromCharCode(0x1efff) + ']'\n/* eslint-enable prettier/prettier */);\n\n/**\n * @param {string} text Text.\n * @param {CanvasTextAlign} align Alignment.\n * @return {number} Text alignment.\n */\nfunction horizontalTextAlign(text, align) {\n  if (align === 'start') {\n    align = rtlRegEx.test(text) ? 'right' : 'left';\n  } else if (align === 'end') {\n    align = rtlRegEx.test(text) ? 'left' : 'right';\n  }\n  return TEXT_ALIGN[align];\n}\n\n/**\n * @param {Array<string>} acc Accumulator.\n * @param {string} line Line of text.\n * @param {number} i Index\n * @return {Array<string>} Accumulator.\n */\nfunction createTextChunks(acc, line, i) {\n  if (i > 0) {\n    acc.push('\\n', '');\n  }\n  acc.push(line, '');\n  return acc;\n}\nclass Executor {\n  /**\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {boolean} overlaps The replay can have overlapping geometries.\n   * @param {import(\"../canvas.js\").SerializableInstructions} instructions The serializable instructions.\n   * @param {boolean} [deferredRendering] Enable deferred rendering.\n   */\n  constructor(resolution, pixelRatio, overlaps, instructions, deferredRendering) {\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.overlaps = overlaps;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.pixelRatio = pixelRatio;\n\n    /**\n     * @protected\n     * @const\n     * @type {number}\n     */\n    this.resolution = resolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.alignAndScaleFill_;\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.instructions = instructions.instructions;\n\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.coordinates = instructions.coordinates;\n\n    /**\n     * @private\n     * @type {!Object<number,import(\"../../coordinate.js\").Coordinate|Array<import(\"../../coordinate.js\").Coordinate>|Array<Array<import(\"../../coordinate.js\").Coordinate>>>}\n     */\n    this.coordinateCache_ = {};\n\n    /**\n     * @private\n     * @type {!import(\"../../transform.js\").Transform}\n     */\n    this.renderedTransform_ = createTransform();\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.hitDetectionInstructions = instructions.hitDetectionInstructions;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.pixelCoordinates_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.viewRotation_ = 0;\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\n     */\n    this.fillStates = instructions.fillStates || {};\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\n     */\n    this.strokeStates = instructions.strokeStates || {};\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\n     */\n    this.textStates = instructions.textStates || {};\n\n    /**\n     * @private\n     * @type {Object<string, Object<string, number>>}\n     */\n    this.widths_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, import(\"../canvas.js\").Label>}\n     */\n    this.labels_ = {};\n\n    /**\n     * @private\n     * @type {import(\"../canvas/ZIndexContext.js\").default}\n     */\n    this.zIndexContext_ = deferredRendering ? new ZIndexContext() : null;\n  }\n\n  /**\n   * @return {ZIndexContext} ZIndex context.\n   */\n  getZIndexContext() {\n    return this.zIndexContext_;\n  }\n\n  /**\n   * @param {string|Array<string>} text Text.\n   * @param {string} textKey Text style key.\n   * @param {string} fillKey Fill style key.\n   * @param {string} strokeKey Stroke style key.\n   * @return {import(\"../canvas.js\").Label} Label.\n   */\n  createLabel(text, textKey, fillKey, strokeKey) {\n    const key = text + textKey + fillKey + strokeKey;\n    if (this.labels_[key]) {\n      return this.labels_[key];\n    }\n    const strokeState = strokeKey ? this.strokeStates[strokeKey] : null;\n    const fillState = fillKey ? this.fillStates[fillKey] : null;\n    const textState = this.textStates[textKey];\n    const pixelRatio = this.pixelRatio;\n    const scale = [textState.scale[0] * pixelRatio, textState.scale[1] * pixelRatio];\n    const align = textState.justify ? TEXT_ALIGN[textState.justify] : horizontalTextAlign(Array.isArray(text) ? text[0] : text, textState.textAlign || defaultTextAlign);\n    const strokeWidth = strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;\n    const chunks = Array.isArray(text) ? text : String(text).split('\\n').reduce(createTextChunks, []);\n    const {\n      width,\n      height,\n      widths,\n      heights,\n      lineWidths\n    } = getTextDimensions(textState, chunks);\n    const renderWidth = width + strokeWidth;\n    const contextInstructions = [];\n    // make canvas 2 pixels wider to account for italic text width measurement errors\n    const w = (renderWidth + 2) * scale[0];\n    const h = (height + strokeWidth) * scale[1];\n    /** @type {import(\"../canvas.js\").Label} */\n    const label = {\n      width: w < 0 ? Math.floor(w) : Math.ceil(w),\n      height: h < 0 ? Math.floor(h) : Math.ceil(h),\n      contextInstructions: contextInstructions\n    };\n    if (scale[0] != 1 || scale[1] != 1) {\n      contextInstructions.push('scale', scale);\n    }\n    if (strokeKey) {\n      contextInstructions.push('strokeStyle', strokeState.strokeStyle);\n      contextInstructions.push('lineWidth', strokeWidth);\n      contextInstructions.push('lineCap', strokeState.lineCap);\n      contextInstructions.push('lineJoin', strokeState.lineJoin);\n      contextInstructions.push('miterLimit', strokeState.miterLimit);\n      contextInstructions.push('setLineDash', [strokeState.lineDash]);\n      contextInstructions.push('lineDashOffset', strokeState.lineDashOffset);\n    }\n    if (fillKey) {\n      contextInstructions.push('fillStyle', fillState.fillStyle);\n    }\n    contextInstructions.push('textBaseline', 'middle');\n    contextInstructions.push('textAlign', 'center');\n    const leftRight = 0.5 - align;\n    let x = align * renderWidth + leftRight * strokeWidth;\n    const strokeInstructions = [];\n    const fillInstructions = [];\n    let lineHeight = 0;\n    let lineOffset = 0;\n    let widthHeightIndex = 0;\n    let lineWidthIndex = 0;\n    let previousFont;\n    for (let i = 0, ii = chunks.length; i < ii; i += 2) {\n      const text = chunks[i];\n      if (text === '\\n') {\n        lineOffset += lineHeight;\n        lineHeight = 0;\n        x = align * renderWidth + leftRight * strokeWidth;\n        ++lineWidthIndex;\n        continue;\n      }\n      const font = chunks[i + 1] || textState.font;\n      if (font !== previousFont) {\n        if (strokeKey) {\n          strokeInstructions.push('font', font);\n        }\n        if (fillKey) {\n          fillInstructions.push('font', font);\n        }\n        previousFont = font;\n      }\n      lineHeight = Math.max(lineHeight, heights[widthHeightIndex]);\n      const fillStrokeArgs = [text, x + leftRight * widths[widthHeightIndex] + align * (widths[widthHeightIndex] - lineWidths[lineWidthIndex]), 0.5 * (strokeWidth + lineHeight) + lineOffset];\n      x += widths[widthHeightIndex];\n      if (strokeKey) {\n        strokeInstructions.push('strokeText', fillStrokeArgs);\n      }\n      if (fillKey) {\n        fillInstructions.push('fillText', fillStrokeArgs);\n      }\n      ++widthHeightIndex;\n    }\n    Array.prototype.push.apply(contextInstructions, strokeInstructions);\n    Array.prototype.push.apply(contextInstructions, fillInstructions);\n    this.labels_[key] = label;\n    return label;\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../coordinate.js\").Coordinate} p1 1st point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p2 2nd point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p3 3rd point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p4 4th point of the background box.\n   * @param {Array<*>} fillInstruction Fill instruction.\n   * @param {Array<*>} strokeInstruction Stroke instruction.\n   */\n  replayTextBackground_(context, p1, p2, p3, p4, fillInstruction, strokeInstruction) {\n    context.beginPath();\n    context.moveTo.apply(context, p1);\n    context.lineTo.apply(context, p2);\n    context.lineTo.apply(context, p3);\n    context.lineTo.apply(context, p4);\n    context.lineTo.apply(context, p1);\n    if (fillInstruction) {\n      this.alignAndScaleFill_ = /** @type {number} */fillInstruction[2];\n      context.fillStyle = /** @type {string} */fillInstruction[1];\n      this.fill_(context);\n    }\n    if (strokeInstruction) {\n      this.setStrokeStyle_(context, /** @type {Array<*>} */strokeInstruction);\n      context.stroke();\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} sheetWidth Width of the sprite sheet.\n   * @param {number} sheetHeight Height of the sprite sheet.\n   * @param {number} centerX X.\n   * @param {number} centerY Y.\n   * @param {number} width Width.\n   * @param {number} height Height.\n   * @param {number} anchorX Anchor X.\n   * @param {number} anchorY Anchor Y.\n   * @param {number} originX Origin X.\n   * @param {number} originY Origin Y.\n   * @param {number} rotation Rotation.\n   * @param {import(\"../../size.js\").Size} scale Scale.\n   * @param {boolean} snapToPixel Snap to pixel.\n   * @param {Array<number>} padding Padding.\n   * @param {boolean} fillStroke Background fill or stroke.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @return {ImageOrLabelDimensions} Dimensions for positioning and decluttering the image or label.\n   */\n  calculateImageOrLabelDimensions_(sheetWidth, sheetHeight, centerX, centerY, width, height, anchorX, anchorY, originX, originY, rotation, scale, snapToPixel, padding, fillStroke, feature) {\n    anchorX *= scale[0];\n    anchorY *= scale[1];\n    let x = centerX - anchorX;\n    let y = centerY - anchorY;\n    const w = width + originX > sheetWidth ? sheetWidth - originX : width;\n    const h = height + originY > sheetHeight ? sheetHeight - originY : height;\n    const boxW = padding[3] + w * scale[0] + padding[1];\n    const boxH = padding[0] + h * scale[1] + padding[2];\n    const boxX = x - padding[3];\n    const boxY = y - padding[0];\n    if (fillStroke || rotation !== 0) {\n      p1[0] = boxX;\n      p4[0] = boxX;\n      p1[1] = boxY;\n      p2[1] = boxY;\n      p2[0] = boxX + boxW;\n      p3[0] = p2[0];\n      p3[1] = boxY + boxH;\n      p4[1] = p3[1];\n    }\n    let transform;\n    if (rotation !== 0) {\n      transform = composeTransform(createTransform(), centerX, centerY, 1, 1, rotation, -centerX, -centerY);\n      applyTransform(transform, p1);\n      applyTransform(transform, p2);\n      applyTransform(transform, p3);\n      applyTransform(transform, p4);\n      createOrUpdate(Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1]), tmpExtent);\n    } else {\n      createOrUpdate(Math.min(boxX, boxX + boxW), Math.min(boxY, boxY + boxH), Math.max(boxX, boxX + boxW), Math.max(boxY, boxY + boxH), tmpExtent);\n    }\n    if (snapToPixel) {\n      x = Math.round(x);\n      y = Math.round(y);\n    }\n    return {\n      drawImageX: x,\n      drawImageY: y,\n      drawImageW: w,\n      drawImageH: h,\n      originX: originX,\n      originY: originY,\n      declutterBox: {\n        minX: tmpExtent[0],\n        minY: tmpExtent[1],\n        maxX: tmpExtent[2],\n        maxY: tmpExtent[3],\n        value: feature\n      },\n      canvasTransform: transform,\n      scale: scale\n    };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import('../../size.js').Size} scaledCanvasSize Scaled canvas size.\n   * @param {import(\"../canvas.js\").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} imageOrLabel Image.\n   * @param {ImageOrLabelDimensions} dimensions Dimensions.\n   * @param {number} opacity Opacity.\n   * @param {Array<*>} fillInstruction Fill instruction.\n   * @param {Array<*>} strokeInstruction Stroke instruction.\n   * @return {boolean} The image or label was rendered.\n   */\n  replayImageOrLabel_(context, scaledCanvasSize, imageOrLabel, dimensions, opacity, fillInstruction, strokeInstruction) {\n    const fillStroke = !!(fillInstruction || strokeInstruction);\n    const box = dimensions.declutterBox;\n    const strokePadding = strokeInstruction ? strokeInstruction[2] * dimensions.scale[0] / 2 : 0;\n    const intersects = box.minX - strokePadding <= scaledCanvasSize[0] && box.maxX + strokePadding >= 0 && box.minY - strokePadding <= scaledCanvasSize[1] && box.maxY + strokePadding >= 0;\n    if (intersects) {\n      if (fillStroke) {\n        this.replayTextBackground_(context, p1, p2, p3, p4, /** @type {Array<*>} */fillInstruction, /** @type {Array<*>} */strokeInstruction);\n      }\n      drawImageOrLabel(context, dimensions.canvasTransform, opacity, imageOrLabel, dimensions.originX, dimensions.originY, dimensions.drawImageW, dimensions.drawImageH, dimensions.drawImageX, dimensions.drawImageY, dimensions.scale);\n    }\n    return true;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   */\n  fill_(context) {\n    const alignAndScale = this.alignAndScaleFill_;\n    if (alignAndScale) {\n      const origin = applyTransform(this.renderedTransform_, [0, 0]);\n      const repeatSize = 512 * this.pixelRatio;\n      context.save();\n      context.translate(origin[0] % repeatSize, origin[1] % repeatSize);\n      if (alignAndScale !== 1) {\n        context.scale(alignAndScale, alignAndScale);\n      }\n      context.rotate(this.viewRotation_);\n    }\n    context.fill();\n    if (alignAndScale) {\n      context.restore();\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {Array<*>} instruction Instruction.\n   */\n  setStrokeStyle_(context, instruction) {\n    context.strokeStyle = /** @type {import(\"../../colorlike.js\").ColorLike} */instruction[1];\n    context.lineWidth = /** @type {number} */instruction[2];\n    context.lineCap = /** @type {CanvasLineCap} */instruction[3];\n    context.lineJoin = /** @type {CanvasLineJoin} */instruction[4];\n    context.miterLimit = /** @type {number} */instruction[5];\n    context.lineDashOffset = /** @type {number} */instruction[7];\n    context.setLineDash(/** @type {Array<number>} */instruction[6]);\n  }\n\n  /**\n   * @private\n   * @param {string|Array<string>} text The text to draw.\n   * @param {string} textKey The key of the text state.\n   * @param {string} strokeKey The key for the stroke state.\n   * @param {string} fillKey The key for the fill state.\n   * @return {{label: import(\"../canvas.js\").Label, anchorX: number, anchorY: number}} The text image and its anchor.\n   */\n  drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey) {\n    const textState = this.textStates[textKey];\n    const label = this.createLabel(text, textKey, fillKey, strokeKey);\n    const strokeState = this.strokeStates[strokeKey];\n    const pixelRatio = this.pixelRatio;\n    const align = horizontalTextAlign(Array.isArray(text) ? text[0] : text, textState.textAlign || defaultTextAlign);\n    const baseline = TEXT_ALIGN[textState.textBaseline || defaultTextBaseline];\n    const strokeWidth = strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;\n\n    // Remove the 2 pixels we added in createLabel() for the anchor\n    const width = label.width / pixelRatio - 2 * textState.scale[0];\n    const anchorX = align * width + 2 * (0.5 - align) * strokeWidth;\n    const anchorY = baseline * label.height / pixelRatio + 2 * (0.5 - baseline) * strokeWidth;\n    return {\n      label: label,\n      anchorX: anchorX,\n      anchorY: anchorY\n    };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import('../../size.js').Size} scaledCanvasSize Scaled canvas size\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {Array<*>} instructions Instructions array.\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\n   * @param {FeatureCallback<T>} [featureCallback] Feature callback.\n   * @param {import(\"../../extent.js\").Extent} [hitExtent] Only check\n   *     features that intersect this extent.\n   * @param {import(\"rbush\").default<DeclutterEntry>} [declutterTree] Declutter tree.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  execute_(context, scaledCanvasSize, transform, instructions, snapToPixel, featureCallback, hitExtent, declutterTree) {\n    const zIndexContext = this.zIndexContext_;\n    /** @type {Array<number>} */\n    let pixelCoordinates;\n    if (this.pixelCoordinates_ && equals(transform, this.renderedTransform_)) {\n      pixelCoordinates = this.pixelCoordinates_;\n    } else {\n      if (!this.pixelCoordinates_) {\n        this.pixelCoordinates_ = [];\n      }\n      pixelCoordinates = transform2D(this.coordinates, 0, this.coordinates.length, 2, transform, this.pixelCoordinates_);\n      transformSetFromArray(this.renderedTransform_, transform);\n    }\n    let i = 0; // instruction index\n    const ii = instructions.length; // end of instructions\n    let d = 0; // data index\n    let dd; // end of per-instruction data\n    let anchorX, anchorY, /** @type {import('../../style/Style.js').DeclutterMode} */\n      declutterMode, prevX, prevY, roundX, roundY, image, text, textKey, strokeKey, fillKey;\n    let pendingFill = 0;\n    let pendingStroke = 0;\n    const coordinateCache = this.coordinateCache_;\n    const viewRotation = this.viewRotation_;\n    const viewRotationFromTransform = Math.round(Math.atan2(-transform[1], transform[0]) * 1e12) / 1e12;\n    const state = /** @type {import(\"../../render.js\").State} */{\n      context: context,\n      pixelRatio: this.pixelRatio,\n      resolution: this.resolution,\n      rotation: viewRotation\n    };\n\n    // When the batch size gets too big, performance decreases. 200 is a good\n    // balance between batch size and number of fill/stroke instructions.\n    const batchSize = this.instructions != instructions || this.overlaps ? 0 : 200;\n    let /** @type {import(\"../../Feature.js\").FeatureLike} */feature;\n    let x, y, currentGeometry;\n    while (i < ii) {\n      const instruction = instructions[i];\n      const type = /** @type {import(\"./Instruction.js\").default} */\n      instruction[0];\n      switch (type) {\n        case CanvasInstruction.BEGIN_GEOMETRY:\n          feature = /** @type {import(\"../../Feature.js\").FeatureLike} */\n          instruction[1];\n          currentGeometry = instruction[3];\n          if (!feature.getGeometry()) {\n            i = /** @type {number} */instruction[2];\n          } else if (hitExtent !== undefined && !intersects(hitExtent, currentGeometry.getExtent())) {\n            i = /** @type {number} */instruction[2] + 1;\n          } else {\n            ++i;\n          }\n          if (zIndexContext) {\n            zIndexContext.zIndex = instruction[4];\n          }\n          break;\n        case CanvasInstruction.BEGIN_PATH:\n          if (pendingFill > batchSize) {\n            this.fill_(context);\n            pendingFill = 0;\n          }\n          if (pendingStroke > batchSize) {\n            context.stroke();\n            pendingStroke = 0;\n          }\n          if (!pendingFill && !pendingStroke) {\n            context.beginPath();\n            prevX = NaN;\n            prevY = NaN;\n          }\n          ++i;\n          break;\n        case CanvasInstruction.CIRCLE:\n          d = /** @type {number} */instruction[1];\n          const x1 = pixelCoordinates[d];\n          const y1 = pixelCoordinates[d + 1];\n          const x2 = pixelCoordinates[d + 2];\n          const y2 = pixelCoordinates[d + 3];\n          const dx = x2 - x1;\n          const dy = y2 - y1;\n          const r = Math.sqrt(dx * dx + dy * dy);\n          context.moveTo(x1 + r, y1);\n          context.arc(x1, y1, r, 0, 2 * Math.PI, true);\n          ++i;\n          break;\n        case CanvasInstruction.CLOSE_PATH:\n          context.closePath();\n          ++i;\n          break;\n        case CanvasInstruction.CUSTOM:\n          d = /** @type {number} */instruction[1];\n          dd = instruction[2];\n          const geometry = /** @type {import(\"../../geom/SimpleGeometry.js\").default} */\n          instruction[3];\n          const renderer = instruction[4];\n          const fn = instruction[5];\n          state.geometry = geometry;\n          state.feature = feature;\n          if (!(i in coordinateCache)) {\n            coordinateCache[i] = [];\n          }\n          const coords = coordinateCache[i];\n          if (fn) {\n            fn(pixelCoordinates, d, dd, 2, coords);\n          } else {\n            coords[0] = pixelCoordinates[d];\n            coords[1] = pixelCoordinates[d + 1];\n            coords.length = 2;\n          }\n          if (zIndexContext) {\n            zIndexContext.zIndex = instruction[6];\n          }\n          renderer(coords, state);\n          ++i;\n          break;\n        case CanvasInstruction.DRAW_IMAGE:\n          d = /** @type {number} */instruction[1];\n          dd = /** @type {number} */instruction[2];\n          image = /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */\n          instruction[3];\n\n          // Remaining arguments in DRAW_IMAGE are in alphabetical order\n          anchorX = /** @type {number} */instruction[4];\n          anchorY = /** @type {number} */instruction[5];\n          let height = /** @type {number} */instruction[6];\n          const opacity = /** @type {number} */instruction[7];\n          const originX = /** @type {number} */instruction[8];\n          const originY = /** @type {number} */instruction[9];\n          const rotateWithView = /** @type {boolean} */instruction[10];\n          let rotation = /** @type {number} */instruction[11];\n          const scale = /** @type {import(\"../../size.js\").Size} */\n          instruction[12];\n          let width = /** @type {number} */instruction[13];\n          declutterMode = instruction[14] || 'declutter';\n          const declutterImageWithText = /** @type {{args: import(\"../canvas.js\").DeclutterImageWithText, declutterMode: import('../../style/Style.js').DeclutterMode}} */\n          instruction[15];\n          if (!image && instruction.length >= 20) {\n            // create label images\n            text = /** @type {string} */instruction[19];\n            textKey = /** @type {string} */instruction[20];\n            strokeKey = /** @type {string} */instruction[21];\n            fillKey = /** @type {string} */instruction[22];\n            const labelWithAnchor = this.drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey);\n            image = labelWithAnchor.label;\n            instruction[3] = image;\n            const textOffsetX = /** @type {number} */instruction[23];\n            anchorX = (labelWithAnchor.anchorX - textOffsetX) * this.pixelRatio;\n            instruction[4] = anchorX;\n            const textOffsetY = /** @type {number} */instruction[24];\n            anchorY = (labelWithAnchor.anchorY - textOffsetY) * this.pixelRatio;\n            instruction[5] = anchorY;\n            height = image.height;\n            instruction[6] = height;\n            width = image.width;\n            instruction[13] = width;\n          }\n          let geometryWidths;\n          if (instruction.length > 25) {\n            geometryWidths = /** @type {number} */instruction[25];\n          }\n          let padding, backgroundFillInstruction, backgroundStrokeInstruction;\n          if (instruction.length > 17) {\n            padding = /** @type {Array<number>} */instruction[16];\n            backgroundFillInstruction = /** @type {Array<*>} */\n            instruction[17];\n            backgroundStrokeInstruction = /** @type {Array<*>} */\n            instruction[18];\n          } else {\n            padding = defaultPadding;\n            backgroundFillInstruction = null;\n            backgroundStrokeInstruction = null;\n          }\n          if (rotateWithView && viewRotationFromTransform) {\n            // Canvas is expected to be rotated to reverse view rotation.\n            rotation += viewRotation;\n          } else if (!rotateWithView && !viewRotationFromTransform) {\n            // Canvas is not rotated, images need to be rotated back to be north-up.\n            rotation -= viewRotation;\n          }\n          let widthIndex = 0;\n          for (; d < dd; d += 2) {\n            if (geometryWidths && geometryWidths[widthIndex++] < width / this.pixelRatio) {\n              continue;\n            }\n            const dimensions = this.calculateImageOrLabelDimensions_(image.width, image.height, pixelCoordinates[d], pixelCoordinates[d + 1], width, height, anchorX, anchorY, originX, originY, rotation, scale, snapToPixel, padding, !!backgroundFillInstruction || !!backgroundStrokeInstruction, feature);\n            /** @type {ReplayImageOrLabelArgs} */\n            const args = [context, scaledCanvasSize, image, dimensions, opacity, backgroundFillInstruction, backgroundStrokeInstruction];\n            if (declutterTree) {\n              let imageArgs, imageDeclutterMode, imageDeclutterBox;\n              if (declutterImageWithText) {\n                const index = dd - d;\n                if (!declutterImageWithText[index]) {\n                  // We now have the image for an image+text combination.\n                  declutterImageWithText[index] = {\n                    args,\n                    declutterMode\n                  };\n                  // Don't render anything for now, wait for the text.\n                  continue;\n                }\n                const imageDeclutter = declutterImageWithText[index];\n                imageArgs = imageDeclutter.args;\n                imageDeclutterMode = imageDeclutter.declutterMode;\n                delete declutterImageWithText[index];\n                imageDeclutterBox = getDeclutterBox(imageArgs);\n              }\n              // We now have image and text for an image+text combination.\n              let renderImage, renderText;\n              if (imageArgs && (imageDeclutterMode !== 'declutter' || !declutterTree.collides(imageDeclutterBox))) {\n                renderImage = true;\n              }\n              if (declutterMode !== 'declutter' || !declutterTree.collides(dimensions.declutterBox)) {\n                renderText = true;\n              }\n              if (imageDeclutterMode === 'declutter' && declutterMode === 'declutter') {\n                const render = renderImage && renderText;\n                renderImage = render;\n                renderText = render;\n              }\n              if (renderImage) {\n                if (imageDeclutterMode !== 'none') {\n                  declutterTree.insert(imageDeclutterBox);\n                }\n                this.replayImageOrLabel_.apply(this, imageArgs);\n              }\n              if (renderText) {\n                if (declutterMode !== 'none') {\n                  declutterTree.insert(dimensions.declutterBox);\n                }\n                this.replayImageOrLabel_.apply(this, args);\n              }\n            } else {\n              this.replayImageOrLabel_.apply(this, args);\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.DRAW_CHARS:\n          const begin = /** @type {number} */instruction[1];\n          const end = /** @type {number} */instruction[2];\n          const baseline = /** @type {number} */instruction[3];\n          const overflow = /** @type {number} */instruction[4];\n          fillKey = /** @type {string} */instruction[5];\n          const maxAngle = /** @type {number} */instruction[6];\n          const measurePixelRatio = /** @type {number} */instruction[7];\n          const offsetY = /** @type {number} */instruction[8];\n          strokeKey = /** @type {string} */instruction[9];\n          const strokeWidth = /** @type {number} */instruction[10];\n          text = /** @type {string} */instruction[11];\n          textKey = /** @type {string} */instruction[12];\n          const pixelRatioScale = [(/** @type {number} */instruction[13]), (/** @type {number} */instruction[13])];\n          declutterMode = instruction[14] || 'declutter';\n          const textKeepUpright = /** @type {boolean} */instruction[15];\n          const textState = this.textStates[textKey];\n          const font = textState.font;\n          const textScale = [textState.scale[0] * measurePixelRatio, textState.scale[1] * measurePixelRatio];\n          let cachedWidths;\n          if (font in this.widths_) {\n            cachedWidths = this.widths_[font];\n          } else {\n            cachedWidths = {};\n            this.widths_[font] = cachedWidths;\n          }\n          const pathLength = lineStringLength(pixelCoordinates, begin, end, 2);\n          const textLength = Math.abs(textScale[0]) * measureAndCacheTextWidth(font, text, cachedWidths);\n          if (overflow || textLength <= pathLength) {\n            const textAlign = this.textStates[textKey].textAlign;\n            const startM = (pathLength - textLength) * horizontalTextAlign(text, textAlign);\n            const parts = drawTextOnPath(pixelCoordinates, begin, end, 2, text, startM, maxAngle, Math.abs(textScale[0]), measureAndCacheTextWidth, font, cachedWidths, viewRotationFromTransform ? 0 : this.viewRotation_, textKeepUpright);\n            drawChars: if (parts) {\n              /** @type {Array<ReplayImageOrLabelArgs>} */\n              const replayImageOrLabelArgs = [];\n              let c, cc, chars, label, part;\n              if (strokeKey) {\n                for (c = 0, cc = parts.length; c < cc; ++c) {\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\n                  chars = /** @type {string} */part[4];\n                  label = this.createLabel(chars, textKey, '', strokeKey);\n                  anchorX = /** @type {number} */part[2] + (textScale[0] < 0 ? -strokeWidth : strokeWidth);\n                  anchorY = baseline * label.height + (0.5 - baseline) * 2 * strokeWidth * textScale[1] / textScale[0] - offsetY;\n                  const dimensions = this.calculateImageOrLabelDimensions_(label.width, label.height, part[0], part[1], label.width, label.height, anchorX, anchorY, 0, 0, part[3], pixelRatioScale, false, defaultPadding, false, feature);\n                  if (declutterTree && declutterMode === 'declutter' && declutterTree.collides(dimensions.declutterBox)) {\n                    break drawChars;\n                  }\n                  replayImageOrLabelArgs.push([context, scaledCanvasSize, label, dimensions, 1, null, null]);\n                }\n              }\n              if (fillKey) {\n                for (c = 0, cc = parts.length; c < cc; ++c) {\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\n                  chars = /** @type {string} */part[4];\n                  label = this.createLabel(chars, textKey, fillKey, '');\n                  anchorX = /** @type {number} */part[2];\n                  anchorY = baseline * label.height - offsetY;\n                  const dimensions = this.calculateImageOrLabelDimensions_(label.width, label.height, part[0], part[1], label.width, label.height, anchorX, anchorY, 0, 0, part[3], pixelRatioScale, false, defaultPadding, false, feature);\n                  if (declutterTree && declutterMode === 'declutter' && declutterTree.collides(dimensions.declutterBox)) {\n                    break drawChars;\n                  }\n                  replayImageOrLabelArgs.push([context, scaledCanvasSize, label, dimensions, 1, null, null]);\n                }\n              }\n              if (declutterTree && declutterMode !== 'none') {\n                declutterTree.load(replayImageOrLabelArgs.map(getDeclutterBox));\n              }\n              for (let i = 0, ii = replayImageOrLabelArgs.length; i < ii; ++i) {\n                this.replayImageOrLabel_.apply(this, replayImageOrLabelArgs[i]);\n              }\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.END_GEOMETRY:\n          if (featureCallback !== undefined) {\n            feature = /** @type {import(\"../../Feature.js\").FeatureLike} */\n            instruction[1];\n            const result = featureCallback(feature, currentGeometry, declutterMode);\n            if (result) {\n              return result;\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.FILL:\n          if (batchSize) {\n            pendingFill++;\n          } else {\n            this.fill_(context);\n          }\n          ++i;\n          break;\n        case CanvasInstruction.MOVE_TO_LINE_TO:\n          d = /** @type {number} */instruction[1];\n          dd = /** @type {number} */instruction[2];\n          x = pixelCoordinates[d];\n          y = pixelCoordinates[d + 1];\n          context.moveTo(x, y);\n          prevX = x + 0.5 | 0;\n          prevY = y + 0.5 | 0;\n          for (d += 2; d < dd; d += 2) {\n            x = pixelCoordinates[d];\n            y = pixelCoordinates[d + 1];\n            roundX = x + 0.5 | 0;\n            roundY = y + 0.5 | 0;\n            if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {\n              context.lineTo(x, y);\n              prevX = roundX;\n              prevY = roundY;\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.SET_FILL_STYLE:\n          this.alignAndScaleFill_ = instruction[2];\n          if (pendingFill) {\n            this.fill_(context);\n            pendingFill = 0;\n            if (pendingStroke) {\n              context.stroke();\n              pendingStroke = 0;\n            }\n          }\n\n          /** @type {import(\"../../colorlike.js\").ColorLike} */\n          context.fillStyle = instruction[1];\n          ++i;\n          break;\n        case CanvasInstruction.SET_STROKE_STYLE:\n          if (pendingStroke) {\n            context.stroke();\n            pendingStroke = 0;\n          }\n          this.setStrokeStyle_(context, /** @type {Array<*>} */instruction);\n          ++i;\n          break;\n        case CanvasInstruction.STROKE:\n          if (batchSize) {\n            pendingStroke++;\n          } else {\n            context.stroke();\n          }\n          ++i;\n          break;\n        default:\n          // consume the instruction anyway, to avoid an infinite loop\n          ++i;\n          break;\n      }\n    }\n    if (pendingFill) {\n      this.fill_(context);\n    }\n    if (pendingStroke) {\n      context.stroke();\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import('../../size.js').Size} scaledCanvasSize Scaled canvas size.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\n   * @param {import(\"rbush\").default<DeclutterEntry>} [declutterTree] Declutter tree.\n   */\n  execute(context, scaledCanvasSize, transform, viewRotation, snapToPixel, declutterTree) {\n    this.viewRotation_ = viewRotation;\n    this.execute_(context, scaledCanvasSize, transform, this.instructions, snapToPixel, undefined, undefined, declutterTree);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {FeatureCallback<T>} [featureCallback] Feature callback.\n   * @param {import(\"../../extent.js\").Extent} [hitExtent] Only check\n   *     features that intersect this extent.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  executeHitDetection(context, transform, viewRotation, featureCallback, hitExtent) {\n    this.viewRotation_ = viewRotation;\n    return this.execute_(context, [context.canvas.width, context.canvas.height], transform, this.hitDetectionInstructions, true, featureCallback, hitExtent);\n  }\n}\nexport default Executor;","map":{"version":3,"names":["equals","createEmpty","createOrUpdate","intersects","lineStringLength","drawTextOnPath","transform2D","apply","applyTransform","compose","composeTransform","create","createTransform","setFromArray","transformSetFromArray","ZIndexContext","defaultPadding","defaultTextAlign","defaultTextBaseline","drawImageOrLabel","getTextDimensions","measureAndCacheTextWidth","CanvasInstruction","TEXT_ALIGN","tmpExtent","p1","p2","p3","p4","getDeclutterBox","replayImageOrLabelArgs","declutterBox","rtlRegEx","RegExp","String","fromCharCode","horizontalTextAlign","text","align","test","createTextChunks","acc","line","i","push","Executor","constructor","resolution","pixelRatio","overlaps","instructions","deferredRendering","alignAndScaleFill_","coordinates","coordinateCache_","renderedTransform_","hitDetectionInstructions","pixelCoordinates_","viewRotation_","fillStates","strokeStates","textStates","widths_","labels_","zIndexContext_","getZIndexContext","createLabel","textKey","fillKey","strokeKey","key","strokeState","fillState","textState","scale","justify","Array","isArray","textAlign","strokeWidth","lineWidth","chunks","split","reduce","width","height","widths","heights","lineWidths","renderWidth","contextInstructions","w","h","label","Math","floor","ceil","strokeStyle","lineCap","lineJoin","miterLimit","lineDash","lineDashOffset","fillStyle","leftRight","x","strokeInstructions","fillInstructions","lineHeight","lineOffset","widthHeightIndex","lineWidthIndex","previousFont","ii","length","font","max","fillStrokeArgs","prototype","replayTextBackground_","context","fillInstruction","strokeInstruction","beginPath","moveTo","lineTo","fill_","setStrokeStyle_","stroke","calculateImageOrLabelDimensions_","sheetWidth","sheetHeight","centerX","centerY","anchorX","anchorY","originX","originY","rotation","snapToPixel","padding","fillStroke","feature","y","boxW","boxH","boxX","boxY","transform","min","round","drawImageX","drawImageY","drawImageW","drawImageH","minX","minY","maxX","maxY","value","canvasTransform","replayImageOrLabel_","scaledCanvasSize","imageOrLabel","dimensions","opacity","box","strokePadding","alignAndScale","origin","repeatSize","save","translate","rotate","fill","restore","instruction","setLineDash","drawLabelWithPointPlacement_","baseline","textBaseline","execute_","featureCallback","hitExtent","declutterTree","zIndexContext","pixelCoordinates","d","dd","declutterMode","prevX","prevY","roundX","roundY","image","pendingFill","pendingStroke","coordinateCache","viewRotation","viewRotationFromTransform","atan2","state","batchSize","currentGeometry","type","BEGIN_GEOMETRY","getGeometry","undefined","getExtent","zIndex","BEGIN_PATH","NaN","CIRCLE","x1","y1","x2","y2","dx","dy","r","sqrt","arc","PI","CLOSE_PATH","closePath","CUSTOM","geometry","renderer","fn","coords","DRAW_IMAGE","rotateWithView","declutterImageWithText","labelWithAnchor","textOffsetX","textOffsetY","geometryWidths","backgroundFillInstruction","backgroundStrokeInstruction","widthIndex","args","imageArgs","imageDeclutterMode","imageDeclutterBox","index","imageDeclutter","renderImage","renderText","collides","render","insert","DRAW_CHARS","begin","end","overflow","maxAngle","measurePixelRatio","offsetY","pixelRatioScale","textKeepUpright","textScale","cachedWidths","pathLength","textLength","abs","startM","parts","drawChars","c","cc","chars","part","load","map","END_GEOMETRY","result","FILL","MOVE_TO_LINE_TO","SET_FILL_STYLE","SET_STROKE_STYLE","STROKE","execute","executeHitDetection","canvas"],"sources":["/Users/kenn/Documents/GitHub/AccessibleMapBackup/node_modules/ol/render/canvas/Executor.js"],"sourcesContent":["/**\n * @module ol/render/canvas/Executor\n */\nimport {equals} from '../../array.js';\nimport {createEmpty, createOrUpdate, intersects} from '../../extent.js';\nimport {lineStringLength} from '../../geom/flat/length.js';\nimport {drawTextOnPath} from '../../geom/flat/textpath.js';\nimport {transform2D} from '../../geom/flat/transform.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n  create as createTransform,\n  setFromArray as transformSetFromArray,\n} from '../../transform.js';\nimport ZIndexContext from '../canvas/ZIndexContext.js';\nimport {\n  defaultPadding,\n  defaultTextAlign,\n  defaultTextBaseline,\n  drawImageOrLabel,\n  getTextDimensions,\n  measureAndCacheTextWidth,\n} from '../canvas.js';\nimport CanvasInstruction from './Instruction.js';\nimport {TEXT_ALIGN} from './TextBuilder.js';\n\n/**\n * @typedef {import('../../structs/RBush.js').Entry<import('../../Feature.js').FeatureLike>} DeclutterEntry\n */\n\n/**\n * @typedef {Object} ImageOrLabelDimensions\n * @property {number} drawImageX DrawImageX.\n * @property {number} drawImageY DrawImageY.\n * @property {number} drawImageW DrawImageW.\n * @property {number} drawImageH DrawImageH.\n * @property {number} originX OriginX.\n * @property {number} originY OriginY.\n * @property {Array<number>} scale Scale.\n * @property {DeclutterEntry} declutterBox DeclutterBox.\n * @property {import(\"../../transform.js\").Transform} canvasTransform CanvasTransform.\n */\n\n/**\n * @typedef {{0: CanvasRenderingContext2D, 1: import('../../size.js').Size, 2: import(\"../canvas.js\").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement, 3: ImageOrLabelDimensions, 4: number, 5: Array<*>, 6: Array<*>}} ReplayImageOrLabelArgs\n */\n\n/**\n * @template T\n * @typedef {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default, import(\"../../style/Style.js\").DeclutterMode): T} FeatureCallback\n */\n\n/**\n * @type {import(\"../../extent.js\").Extent}\n */\nconst tmpExtent = createEmpty();\n\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nconst p1 = [];\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nconst p2 = [];\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nconst p3 = [];\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nconst p4 = [];\n\n/**\n * @param {ReplayImageOrLabelArgs} replayImageOrLabelArgs Arguments to replayImageOrLabel\n * @return {DeclutterEntry} Declutter rbush entry.\n */\nfunction getDeclutterBox(replayImageOrLabelArgs) {\n  return replayImageOrLabelArgs[3].declutterBox;\n}\n\nconst rtlRegEx = new RegExp(\n  /* eslint-disable prettier/prettier */\n  '[' +\n    String.fromCharCode(0x00591) + '-' + String.fromCharCode(0x008ff) +\n    String.fromCharCode(0x0fb1d) + '-' + String.fromCharCode(0x0fdff) +\n    String.fromCharCode(0x0fe70) + '-' + String.fromCharCode(0x0fefc) +\n    String.fromCharCode(0x10800) + '-' + String.fromCharCode(0x10fff) +\n    String.fromCharCode(0x1e800) + '-' + String.fromCharCode(0x1efff) +\n  ']'\n  /* eslint-enable prettier/prettier */\n);\n\n/**\n * @param {string} text Text.\n * @param {CanvasTextAlign} align Alignment.\n * @return {number} Text alignment.\n */\nfunction horizontalTextAlign(text, align) {\n  if (align === 'start') {\n    align = rtlRegEx.test(text) ? 'right' : 'left';\n  } else if (align === 'end') {\n    align = rtlRegEx.test(text) ? 'left' : 'right';\n  }\n  return TEXT_ALIGN[align];\n}\n\n/**\n * @param {Array<string>} acc Accumulator.\n * @param {string} line Line of text.\n * @param {number} i Index\n * @return {Array<string>} Accumulator.\n */\nfunction createTextChunks(acc, line, i) {\n  if (i > 0) {\n    acc.push('\\n', '');\n  }\n  acc.push(line, '');\n  return acc;\n}\n\nclass Executor {\n  /**\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {boolean} overlaps The replay can have overlapping geometries.\n   * @param {import(\"../canvas.js\").SerializableInstructions} instructions The serializable instructions.\n   * @param {boolean} [deferredRendering] Enable deferred rendering.\n   */\n  constructor(\n    resolution,\n    pixelRatio,\n    overlaps,\n    instructions,\n    deferredRendering,\n  ) {\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.overlaps = overlaps;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.pixelRatio = pixelRatio;\n\n    /**\n     * @protected\n     * @const\n     * @type {number}\n     */\n    this.resolution = resolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.alignAndScaleFill_;\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.instructions = instructions.instructions;\n\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.coordinates = instructions.coordinates;\n\n    /**\n     * @private\n     * @type {!Object<number,import(\"../../coordinate.js\").Coordinate|Array<import(\"../../coordinate.js\").Coordinate>|Array<Array<import(\"../../coordinate.js\").Coordinate>>>}\n     */\n    this.coordinateCache_ = {};\n\n    /**\n     * @private\n     * @type {!import(\"../../transform.js\").Transform}\n     */\n    this.renderedTransform_ = createTransform();\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.hitDetectionInstructions = instructions.hitDetectionInstructions;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.pixelCoordinates_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.viewRotation_ = 0;\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\n     */\n    this.fillStates = instructions.fillStates || {};\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\n     */\n    this.strokeStates = instructions.strokeStates || {};\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\n     */\n    this.textStates = instructions.textStates || {};\n\n    /**\n     * @private\n     * @type {Object<string, Object<string, number>>}\n     */\n    this.widths_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, import(\"../canvas.js\").Label>}\n     */\n    this.labels_ = {};\n\n    /**\n     * @private\n     * @type {import(\"../canvas/ZIndexContext.js\").default}\n     */\n    this.zIndexContext_ = deferredRendering ? new ZIndexContext() : null;\n  }\n\n  /**\n   * @return {ZIndexContext} ZIndex context.\n   */\n  getZIndexContext() {\n    return this.zIndexContext_;\n  }\n\n  /**\n   * @param {string|Array<string>} text Text.\n   * @param {string} textKey Text style key.\n   * @param {string} fillKey Fill style key.\n   * @param {string} strokeKey Stroke style key.\n   * @return {import(\"../canvas.js\").Label} Label.\n   */\n  createLabel(text, textKey, fillKey, strokeKey) {\n    const key = text + textKey + fillKey + strokeKey;\n    if (this.labels_[key]) {\n      return this.labels_[key];\n    }\n    const strokeState = strokeKey ? this.strokeStates[strokeKey] : null;\n    const fillState = fillKey ? this.fillStates[fillKey] : null;\n    const textState = this.textStates[textKey];\n    const pixelRatio = this.pixelRatio;\n    const scale = [\n      textState.scale[0] * pixelRatio,\n      textState.scale[1] * pixelRatio,\n    ];\n    const align = textState.justify\n      ? TEXT_ALIGN[textState.justify]\n      : horizontalTextAlign(\n          Array.isArray(text) ? text[0] : text,\n          textState.textAlign || defaultTextAlign,\n        );\n    const strokeWidth =\n      strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;\n\n    const chunks = Array.isArray(text)\n      ? text\n      : String(text).split('\\n').reduce(createTextChunks, []);\n\n    const {width, height, widths, heights, lineWidths} = getTextDimensions(\n      textState,\n      chunks,\n    );\n    const renderWidth = width + strokeWidth;\n    const contextInstructions = [];\n    // make canvas 2 pixels wider to account for italic text width measurement errors\n    const w = (renderWidth + 2) * scale[0];\n    const h = (height + strokeWidth) * scale[1];\n    /** @type {import(\"../canvas.js\").Label} */\n    const label = {\n      width: w < 0 ? Math.floor(w) : Math.ceil(w),\n      height: h < 0 ? Math.floor(h) : Math.ceil(h),\n      contextInstructions: contextInstructions,\n    };\n    if (scale[0] != 1 || scale[1] != 1) {\n      contextInstructions.push('scale', scale);\n    }\n    if (strokeKey) {\n      contextInstructions.push('strokeStyle', strokeState.strokeStyle);\n      contextInstructions.push('lineWidth', strokeWidth);\n      contextInstructions.push('lineCap', strokeState.lineCap);\n      contextInstructions.push('lineJoin', strokeState.lineJoin);\n      contextInstructions.push('miterLimit', strokeState.miterLimit);\n      contextInstructions.push('setLineDash', [strokeState.lineDash]);\n      contextInstructions.push('lineDashOffset', strokeState.lineDashOffset);\n    }\n    if (fillKey) {\n      contextInstructions.push('fillStyle', fillState.fillStyle);\n    }\n    contextInstructions.push('textBaseline', 'middle');\n    contextInstructions.push('textAlign', 'center');\n    const leftRight = 0.5 - align;\n    let x = align * renderWidth + leftRight * strokeWidth;\n    const strokeInstructions = [];\n    const fillInstructions = [];\n    let lineHeight = 0;\n    let lineOffset = 0;\n    let widthHeightIndex = 0;\n    let lineWidthIndex = 0;\n    let previousFont;\n    for (let i = 0, ii = chunks.length; i < ii; i += 2) {\n      const text = chunks[i];\n      if (text === '\\n') {\n        lineOffset += lineHeight;\n        lineHeight = 0;\n        x = align * renderWidth + leftRight * strokeWidth;\n        ++lineWidthIndex;\n        continue;\n      }\n      const font = chunks[i + 1] || textState.font;\n      if (font !== previousFont) {\n        if (strokeKey) {\n          strokeInstructions.push('font', font);\n        }\n        if (fillKey) {\n          fillInstructions.push('font', font);\n        }\n        previousFont = font;\n      }\n      lineHeight = Math.max(lineHeight, heights[widthHeightIndex]);\n      const fillStrokeArgs = [\n        text,\n        x +\n          leftRight * widths[widthHeightIndex] +\n          align * (widths[widthHeightIndex] - lineWidths[lineWidthIndex]),\n        0.5 * (strokeWidth + lineHeight) + lineOffset,\n      ];\n      x += widths[widthHeightIndex];\n      if (strokeKey) {\n        strokeInstructions.push('strokeText', fillStrokeArgs);\n      }\n      if (fillKey) {\n        fillInstructions.push('fillText', fillStrokeArgs);\n      }\n      ++widthHeightIndex;\n    }\n    Array.prototype.push.apply(contextInstructions, strokeInstructions);\n    Array.prototype.push.apply(contextInstructions, fillInstructions);\n    this.labels_[key] = label;\n    return label;\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../coordinate.js\").Coordinate} p1 1st point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p2 2nd point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p3 3rd point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p4 4th point of the background box.\n   * @param {Array<*>} fillInstruction Fill instruction.\n   * @param {Array<*>} strokeInstruction Stroke instruction.\n   */\n  replayTextBackground_(\n    context,\n    p1,\n    p2,\n    p3,\n    p4,\n    fillInstruction,\n    strokeInstruction,\n  ) {\n    context.beginPath();\n    context.moveTo.apply(context, p1);\n    context.lineTo.apply(context, p2);\n    context.lineTo.apply(context, p3);\n    context.lineTo.apply(context, p4);\n    context.lineTo.apply(context, p1);\n    if (fillInstruction) {\n      this.alignAndScaleFill_ = /** @type {number} */ (fillInstruction[2]);\n      context.fillStyle = /** @type {string} */ (fillInstruction[1]);\n      this.fill_(context);\n    }\n    if (strokeInstruction) {\n      this.setStrokeStyle_(\n        context,\n        /** @type {Array<*>} */ (strokeInstruction),\n      );\n      context.stroke();\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} sheetWidth Width of the sprite sheet.\n   * @param {number} sheetHeight Height of the sprite sheet.\n   * @param {number} centerX X.\n   * @param {number} centerY Y.\n   * @param {number} width Width.\n   * @param {number} height Height.\n   * @param {number} anchorX Anchor X.\n   * @param {number} anchorY Anchor Y.\n   * @param {number} originX Origin X.\n   * @param {number} originY Origin Y.\n   * @param {number} rotation Rotation.\n   * @param {import(\"../../size.js\").Size} scale Scale.\n   * @param {boolean} snapToPixel Snap to pixel.\n   * @param {Array<number>} padding Padding.\n   * @param {boolean} fillStroke Background fill or stroke.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @return {ImageOrLabelDimensions} Dimensions for positioning and decluttering the image or label.\n   */\n  calculateImageOrLabelDimensions_(\n    sheetWidth,\n    sheetHeight,\n    centerX,\n    centerY,\n    width,\n    height,\n    anchorX,\n    anchorY,\n    originX,\n    originY,\n    rotation,\n    scale,\n    snapToPixel,\n    padding,\n    fillStroke,\n    feature,\n  ) {\n    anchorX *= scale[0];\n    anchorY *= scale[1];\n    let x = centerX - anchorX;\n    let y = centerY - anchorY;\n\n    const w = width + originX > sheetWidth ? sheetWidth - originX : width;\n    const h = height + originY > sheetHeight ? sheetHeight - originY : height;\n    const boxW = padding[3] + w * scale[0] + padding[1];\n    const boxH = padding[0] + h * scale[1] + padding[2];\n    const boxX = x - padding[3];\n    const boxY = y - padding[0];\n\n    if (fillStroke || rotation !== 0) {\n      p1[0] = boxX;\n      p4[0] = boxX;\n      p1[1] = boxY;\n      p2[1] = boxY;\n      p2[0] = boxX + boxW;\n      p3[0] = p2[0];\n      p3[1] = boxY + boxH;\n      p4[1] = p3[1];\n    }\n\n    let transform;\n    if (rotation !== 0) {\n      transform = composeTransform(\n        createTransform(),\n        centerX,\n        centerY,\n        1,\n        1,\n        rotation,\n        -centerX,\n        -centerY,\n      );\n\n      applyTransform(transform, p1);\n      applyTransform(transform, p2);\n      applyTransform(transform, p3);\n      applyTransform(transform, p4);\n      createOrUpdate(\n        Math.min(p1[0], p2[0], p3[0], p4[0]),\n        Math.min(p1[1], p2[1], p3[1], p4[1]),\n        Math.max(p1[0], p2[0], p3[0], p4[0]),\n        Math.max(p1[1], p2[1], p3[1], p4[1]),\n        tmpExtent,\n      );\n    } else {\n      createOrUpdate(\n        Math.min(boxX, boxX + boxW),\n        Math.min(boxY, boxY + boxH),\n        Math.max(boxX, boxX + boxW),\n        Math.max(boxY, boxY + boxH),\n        tmpExtent,\n      );\n    }\n    if (snapToPixel) {\n      x = Math.round(x);\n      y = Math.round(y);\n    }\n    return {\n      drawImageX: x,\n      drawImageY: y,\n      drawImageW: w,\n      drawImageH: h,\n      originX: originX,\n      originY: originY,\n      declutterBox: {\n        minX: tmpExtent[0],\n        minY: tmpExtent[1],\n        maxX: tmpExtent[2],\n        maxY: tmpExtent[3],\n        value: feature,\n      },\n      canvasTransform: transform,\n      scale: scale,\n    };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import('../../size.js').Size} scaledCanvasSize Scaled canvas size.\n   * @param {import(\"../canvas.js\").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} imageOrLabel Image.\n   * @param {ImageOrLabelDimensions} dimensions Dimensions.\n   * @param {number} opacity Opacity.\n   * @param {Array<*>} fillInstruction Fill instruction.\n   * @param {Array<*>} strokeInstruction Stroke instruction.\n   * @return {boolean} The image or label was rendered.\n   */\n  replayImageOrLabel_(\n    context,\n    scaledCanvasSize,\n    imageOrLabel,\n    dimensions,\n    opacity,\n    fillInstruction,\n    strokeInstruction,\n  ) {\n    const fillStroke = !!(fillInstruction || strokeInstruction);\n\n    const box = dimensions.declutterBox;\n    const strokePadding = strokeInstruction\n      ? (strokeInstruction[2] * dimensions.scale[0]) / 2\n      : 0;\n    const intersects =\n      box.minX - strokePadding <= scaledCanvasSize[0] &&\n      box.maxX + strokePadding >= 0 &&\n      box.minY - strokePadding <= scaledCanvasSize[1] &&\n      box.maxY + strokePadding >= 0;\n\n    if (intersects) {\n      if (fillStroke) {\n        this.replayTextBackground_(\n          context,\n          p1,\n          p2,\n          p3,\n          p4,\n          /** @type {Array<*>} */ (fillInstruction),\n          /** @type {Array<*>} */ (strokeInstruction),\n        );\n      }\n      drawImageOrLabel(\n        context,\n        dimensions.canvasTransform,\n        opacity,\n        imageOrLabel,\n        dimensions.originX,\n        dimensions.originY,\n        dimensions.drawImageW,\n        dimensions.drawImageH,\n        dimensions.drawImageX,\n        dimensions.drawImageY,\n        dimensions.scale,\n      );\n    }\n    return true;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   */\n  fill_(context) {\n    const alignAndScale = this.alignAndScaleFill_;\n    if (alignAndScale) {\n      const origin = applyTransform(this.renderedTransform_, [0, 0]);\n      const repeatSize = 512 * this.pixelRatio;\n      context.save();\n      context.translate(origin[0] % repeatSize, origin[1] % repeatSize);\n      if (alignAndScale !== 1) {\n        context.scale(alignAndScale, alignAndScale);\n      }\n      context.rotate(this.viewRotation_);\n    }\n    context.fill();\n    if (alignAndScale) {\n      context.restore();\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {Array<*>} instruction Instruction.\n   */\n  setStrokeStyle_(context, instruction) {\n    context.strokeStyle =\n      /** @type {import(\"../../colorlike.js\").ColorLike} */ (instruction[1]);\n    context.lineWidth = /** @type {number} */ (instruction[2]);\n    context.lineCap = /** @type {CanvasLineCap} */ (instruction[3]);\n    context.lineJoin = /** @type {CanvasLineJoin} */ (instruction[4]);\n    context.miterLimit = /** @type {number} */ (instruction[5]);\n    context.lineDashOffset = /** @type {number} */ (instruction[7]);\n    context.setLineDash(/** @type {Array<number>} */ (instruction[6]));\n  }\n\n  /**\n   * @private\n   * @param {string|Array<string>} text The text to draw.\n   * @param {string} textKey The key of the text state.\n   * @param {string} strokeKey The key for the stroke state.\n   * @param {string} fillKey The key for the fill state.\n   * @return {{label: import(\"../canvas.js\").Label, anchorX: number, anchorY: number}} The text image and its anchor.\n   */\n  drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey) {\n    const textState = this.textStates[textKey];\n\n    const label = this.createLabel(text, textKey, fillKey, strokeKey);\n\n    const strokeState = this.strokeStates[strokeKey];\n    const pixelRatio = this.pixelRatio;\n    const align = horizontalTextAlign(\n      Array.isArray(text) ? text[0] : text,\n      textState.textAlign || defaultTextAlign,\n    );\n    const baseline = TEXT_ALIGN[textState.textBaseline || defaultTextBaseline];\n    const strokeWidth =\n      strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;\n\n    // Remove the 2 pixels we added in createLabel() for the anchor\n    const width = label.width / pixelRatio - 2 * textState.scale[0];\n    const anchorX = align * width + 2 * (0.5 - align) * strokeWidth;\n    const anchorY =\n      (baseline * label.height) / pixelRatio +\n      2 * (0.5 - baseline) * strokeWidth;\n\n    return {\n      label: label,\n      anchorX: anchorX,\n      anchorY: anchorY,\n    };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import('../../size.js').Size} scaledCanvasSize Scaled canvas size\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {Array<*>} instructions Instructions array.\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\n   * @param {FeatureCallback<T>} [featureCallback] Feature callback.\n   * @param {import(\"../../extent.js\").Extent} [hitExtent] Only check\n   *     features that intersect this extent.\n   * @param {import(\"rbush\").default<DeclutterEntry>} [declutterTree] Declutter tree.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  execute_(\n    context,\n    scaledCanvasSize,\n    transform,\n    instructions,\n    snapToPixel,\n    featureCallback,\n    hitExtent,\n    declutterTree,\n  ) {\n    const zIndexContext = this.zIndexContext_;\n    /** @type {Array<number>} */\n    let pixelCoordinates;\n    if (this.pixelCoordinates_ && equals(transform, this.renderedTransform_)) {\n      pixelCoordinates = this.pixelCoordinates_;\n    } else {\n      if (!this.pixelCoordinates_) {\n        this.pixelCoordinates_ = [];\n      }\n      pixelCoordinates = transform2D(\n        this.coordinates,\n        0,\n        this.coordinates.length,\n        2,\n        transform,\n        this.pixelCoordinates_,\n      );\n      transformSetFromArray(this.renderedTransform_, transform);\n    }\n    let i = 0; // instruction index\n    const ii = instructions.length; // end of instructions\n    let d = 0; // data index\n    let dd; // end of per-instruction data\n    let anchorX,\n      anchorY,\n      /** @type {import('../../style/Style.js').DeclutterMode} */\n      declutterMode,\n      prevX,\n      prevY,\n      roundX,\n      roundY,\n      image,\n      text,\n      textKey,\n      strokeKey,\n      fillKey;\n    let pendingFill = 0;\n    let pendingStroke = 0;\n    const coordinateCache = this.coordinateCache_;\n    const viewRotation = this.viewRotation_;\n    const viewRotationFromTransform =\n      Math.round(Math.atan2(-transform[1], transform[0]) * 1e12) / 1e12;\n\n    const state = /** @type {import(\"../../render.js\").State} */ ({\n      context: context,\n      pixelRatio: this.pixelRatio,\n      resolution: this.resolution,\n      rotation: viewRotation,\n    });\n\n    // When the batch size gets too big, performance decreases. 200 is a good\n    // balance between batch size and number of fill/stroke instructions.\n    const batchSize =\n      this.instructions != instructions || this.overlaps ? 0 : 200;\n    let /** @type {import(\"../../Feature.js\").FeatureLike} */ feature;\n    let x, y, currentGeometry;\n    while (i < ii) {\n      const instruction = instructions[i];\n      const type = /** @type {import(\"./Instruction.js\").default} */ (\n        instruction[0]\n      );\n      switch (type) {\n        case CanvasInstruction.BEGIN_GEOMETRY:\n          feature = /** @type {import(\"../../Feature.js\").FeatureLike} */ (\n            instruction[1]\n          );\n          currentGeometry = instruction[3];\n          if (!feature.getGeometry()) {\n            i = /** @type {number} */ (instruction[2]);\n          } else if (\n            hitExtent !== undefined &&\n            !intersects(hitExtent, currentGeometry.getExtent())\n          ) {\n            i = /** @type {number} */ (instruction[2]) + 1;\n          } else {\n            ++i;\n          }\n          if (zIndexContext) {\n            zIndexContext.zIndex = instruction[4];\n          }\n          break;\n        case CanvasInstruction.BEGIN_PATH:\n          if (pendingFill > batchSize) {\n            this.fill_(context);\n            pendingFill = 0;\n          }\n          if (pendingStroke > batchSize) {\n            context.stroke();\n            pendingStroke = 0;\n          }\n          if (!pendingFill && !pendingStroke) {\n            context.beginPath();\n            prevX = NaN;\n            prevY = NaN;\n          }\n          ++i;\n          break;\n        case CanvasInstruction.CIRCLE:\n          d = /** @type {number} */ (instruction[1]);\n          const x1 = pixelCoordinates[d];\n          const y1 = pixelCoordinates[d + 1];\n          const x2 = pixelCoordinates[d + 2];\n          const y2 = pixelCoordinates[d + 3];\n          const dx = x2 - x1;\n          const dy = y2 - y1;\n          const r = Math.sqrt(dx * dx + dy * dy);\n          context.moveTo(x1 + r, y1);\n          context.arc(x1, y1, r, 0, 2 * Math.PI, true);\n          ++i;\n          break;\n        case CanvasInstruction.CLOSE_PATH:\n          context.closePath();\n          ++i;\n          break;\n        case CanvasInstruction.CUSTOM:\n          d = /** @type {number} */ (instruction[1]);\n          dd = instruction[2];\n          const geometry =\n            /** @type {import(\"../../geom/SimpleGeometry.js\").default} */ (\n              instruction[3]\n            );\n          const renderer = instruction[4];\n          const fn = instruction[5];\n          state.geometry = geometry;\n          state.feature = feature;\n          if (!(i in coordinateCache)) {\n            coordinateCache[i] = [];\n          }\n          const coords = coordinateCache[i];\n          if (fn) {\n            fn(pixelCoordinates, d, dd, 2, coords);\n          } else {\n            coords[0] = pixelCoordinates[d];\n            coords[1] = pixelCoordinates[d + 1];\n            coords.length = 2;\n          }\n          if (zIndexContext) {\n            zIndexContext.zIndex = instruction[6];\n          }\n          renderer(coords, state);\n          ++i;\n          break;\n        case CanvasInstruction.DRAW_IMAGE:\n          d = /** @type {number} */ (instruction[1]);\n          dd = /** @type {number} */ (instruction[2]);\n          image =\n            /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */ (\n              instruction[3]\n            );\n\n          // Remaining arguments in DRAW_IMAGE are in alphabetical order\n          anchorX = /** @type {number} */ (instruction[4]);\n          anchorY = /** @type {number} */ (instruction[5]);\n          let height = /** @type {number} */ (instruction[6]);\n          const opacity = /** @type {number} */ (instruction[7]);\n          const originX = /** @type {number} */ (instruction[8]);\n          const originY = /** @type {number} */ (instruction[9]);\n          const rotateWithView = /** @type {boolean} */ (instruction[10]);\n          let rotation = /** @type {number} */ (instruction[11]);\n          const scale = /** @type {import(\"../../size.js\").Size} */ (\n            instruction[12]\n          );\n          let width = /** @type {number} */ (instruction[13]);\n          declutterMode = instruction[14] || 'declutter';\n          const declutterImageWithText =\n            /** @type {{args: import(\"../canvas.js\").DeclutterImageWithText, declutterMode: import('../../style/Style.js').DeclutterMode}} */ (\n              instruction[15]\n            );\n\n          if (!image && instruction.length >= 20) {\n            // create label images\n            text = /** @type {string} */ (instruction[19]);\n            textKey = /** @type {string} */ (instruction[20]);\n            strokeKey = /** @type {string} */ (instruction[21]);\n            fillKey = /** @type {string} */ (instruction[22]);\n            const labelWithAnchor = this.drawLabelWithPointPlacement_(\n              text,\n              textKey,\n              strokeKey,\n              fillKey,\n            );\n            image = labelWithAnchor.label;\n            instruction[3] = image;\n            const textOffsetX = /** @type {number} */ (instruction[23]);\n            anchorX = (labelWithAnchor.anchorX - textOffsetX) * this.pixelRatio;\n            instruction[4] = anchorX;\n            const textOffsetY = /** @type {number} */ (instruction[24]);\n            anchorY = (labelWithAnchor.anchorY - textOffsetY) * this.pixelRatio;\n            instruction[5] = anchorY;\n            height = image.height;\n            instruction[6] = height;\n            width = image.width;\n            instruction[13] = width;\n          }\n\n          let geometryWidths;\n          if (instruction.length > 25) {\n            geometryWidths = /** @type {number} */ (instruction[25]);\n          }\n\n          let padding, backgroundFillInstruction, backgroundStrokeInstruction;\n          if (instruction.length > 17) {\n            padding = /** @type {Array<number>} */ (instruction[16]);\n            backgroundFillInstruction = /** @type {Array<*>} */ (\n              instruction[17]\n            );\n            backgroundStrokeInstruction = /** @type {Array<*>} */ (\n              instruction[18]\n            );\n          } else {\n            padding = defaultPadding;\n            backgroundFillInstruction = null;\n            backgroundStrokeInstruction = null;\n          }\n\n          if (rotateWithView && viewRotationFromTransform) {\n            // Canvas is expected to be rotated to reverse view rotation.\n            rotation += viewRotation;\n          } else if (!rotateWithView && !viewRotationFromTransform) {\n            // Canvas is not rotated, images need to be rotated back to be north-up.\n            rotation -= viewRotation;\n          }\n          let widthIndex = 0;\n          for (; d < dd; d += 2) {\n            if (\n              geometryWidths &&\n              geometryWidths[widthIndex++] < width / this.pixelRatio\n            ) {\n              continue;\n            }\n            const dimensions = this.calculateImageOrLabelDimensions_(\n              image.width,\n              image.height,\n              pixelCoordinates[d],\n              pixelCoordinates[d + 1],\n              width,\n              height,\n              anchorX,\n              anchorY,\n              originX,\n              originY,\n              rotation,\n              scale,\n              snapToPixel,\n              padding,\n              !!backgroundFillInstruction || !!backgroundStrokeInstruction,\n              feature,\n            );\n            /** @type {ReplayImageOrLabelArgs} */\n            const args = [\n              context,\n              scaledCanvasSize,\n              image,\n              dimensions,\n              opacity,\n              backgroundFillInstruction,\n              backgroundStrokeInstruction,\n            ];\n            if (declutterTree) {\n              let imageArgs, imageDeclutterMode, imageDeclutterBox;\n              if (declutterImageWithText) {\n                const index = dd - d;\n                if (!declutterImageWithText[index]) {\n                  // We now have the image for an image+text combination.\n                  declutterImageWithText[index] = {args, declutterMode};\n                  // Don't render anything for now, wait for the text.\n                  continue;\n                }\n                const imageDeclutter = declutterImageWithText[index];\n                imageArgs = imageDeclutter.args;\n                imageDeclutterMode = imageDeclutter.declutterMode;\n                delete declutterImageWithText[index];\n                imageDeclutterBox = getDeclutterBox(imageArgs);\n              }\n              // We now have image and text for an image+text combination.\n              let renderImage, renderText;\n              if (\n                imageArgs &&\n                (imageDeclutterMode !== 'declutter' ||\n                  !declutterTree.collides(imageDeclutterBox))\n              ) {\n                renderImage = true;\n              }\n              if (\n                declutterMode !== 'declutter' ||\n                !declutterTree.collides(dimensions.declutterBox)\n              ) {\n                renderText = true;\n              }\n              if (\n                imageDeclutterMode === 'declutter' &&\n                declutterMode === 'declutter'\n              ) {\n                const render = renderImage && renderText;\n                renderImage = render;\n                renderText = render;\n              }\n              if (renderImage) {\n                if (imageDeclutterMode !== 'none') {\n                  declutterTree.insert(imageDeclutterBox);\n                }\n                this.replayImageOrLabel_.apply(this, imageArgs);\n              }\n              if (renderText) {\n                if (declutterMode !== 'none') {\n                  declutterTree.insert(dimensions.declutterBox);\n                }\n                this.replayImageOrLabel_.apply(this, args);\n              }\n            } else {\n              this.replayImageOrLabel_.apply(this, args);\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.DRAW_CHARS:\n          const begin = /** @type {number} */ (instruction[1]);\n          const end = /** @type {number} */ (instruction[2]);\n          const baseline = /** @type {number} */ (instruction[3]);\n          const overflow = /** @type {number} */ (instruction[4]);\n          fillKey = /** @type {string} */ (instruction[5]);\n          const maxAngle = /** @type {number} */ (instruction[6]);\n          const measurePixelRatio = /** @type {number} */ (instruction[7]);\n          const offsetY = /** @type {number} */ (instruction[8]);\n          strokeKey = /** @type {string} */ (instruction[9]);\n          const strokeWidth = /** @type {number} */ (instruction[10]);\n          text = /** @type {string} */ (instruction[11]);\n          textKey = /** @type {string} */ (instruction[12]);\n          const pixelRatioScale = [\n            /** @type {number} */ (instruction[13]),\n            /** @type {number} */ (instruction[13]),\n          ];\n          declutterMode = instruction[14] || 'declutter';\n\n          const textKeepUpright = /** @type {boolean} */ (instruction[15]);\n          const textState = this.textStates[textKey];\n          const font = textState.font;\n          const textScale = [\n            textState.scale[0] * measurePixelRatio,\n            textState.scale[1] * measurePixelRatio,\n          ];\n\n          let cachedWidths;\n          if (font in this.widths_) {\n            cachedWidths = this.widths_[font];\n          } else {\n            cachedWidths = {};\n            this.widths_[font] = cachedWidths;\n          }\n\n          const pathLength = lineStringLength(pixelCoordinates, begin, end, 2);\n          const textLength =\n            Math.abs(textScale[0]) *\n            measureAndCacheTextWidth(font, text, cachedWidths);\n          if (overflow || textLength <= pathLength) {\n            const textAlign = this.textStates[textKey].textAlign;\n            const startM =\n              (pathLength - textLength) * horizontalTextAlign(text, textAlign);\n            const parts = drawTextOnPath(\n              pixelCoordinates,\n              begin,\n              end,\n              2,\n              text,\n              startM,\n              maxAngle,\n              Math.abs(textScale[0]),\n              measureAndCacheTextWidth,\n              font,\n              cachedWidths,\n              viewRotationFromTransform ? 0 : this.viewRotation_,\n              textKeepUpright,\n            );\n            drawChars: if (parts) {\n              /** @type {Array<ReplayImageOrLabelArgs>} */\n              const replayImageOrLabelArgs = [];\n              let c, cc, chars, label, part;\n              if (strokeKey) {\n                for (c = 0, cc = parts.length; c < cc; ++c) {\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\n                  chars = /** @type {string} */ (part[4]);\n                  label = this.createLabel(chars, textKey, '', strokeKey);\n                  anchorX =\n                    /** @type {number} */ (part[2]) +\n                    (textScale[0] < 0 ? -strokeWidth : strokeWidth);\n                  anchorY =\n                    baseline * label.height +\n                    ((0.5 - baseline) * 2 * strokeWidth * textScale[1]) /\n                      textScale[0] -\n                    offsetY;\n                  const dimensions = this.calculateImageOrLabelDimensions_(\n                    label.width,\n                    label.height,\n                    part[0],\n                    part[1],\n                    label.width,\n                    label.height,\n                    anchorX,\n                    anchorY,\n                    0,\n                    0,\n                    part[3],\n                    pixelRatioScale,\n                    false,\n                    defaultPadding,\n                    false,\n                    feature,\n                  );\n                  if (\n                    declutterTree &&\n                    declutterMode === 'declutter' &&\n                    declutterTree.collides(dimensions.declutterBox)\n                  ) {\n                    break drawChars;\n                  }\n                  replayImageOrLabelArgs.push([\n                    context,\n                    scaledCanvasSize,\n                    label,\n                    dimensions,\n                    1,\n                    null,\n                    null,\n                  ]);\n                }\n              }\n              if (fillKey) {\n                for (c = 0, cc = parts.length; c < cc; ++c) {\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\n                  chars = /** @type {string} */ (part[4]);\n                  label = this.createLabel(chars, textKey, fillKey, '');\n                  anchorX = /** @type {number} */ (part[2]);\n                  anchorY = baseline * label.height - offsetY;\n                  const dimensions = this.calculateImageOrLabelDimensions_(\n                    label.width,\n                    label.height,\n                    part[0],\n                    part[1],\n                    label.width,\n                    label.height,\n                    anchorX,\n                    anchorY,\n                    0,\n                    0,\n                    part[3],\n                    pixelRatioScale,\n                    false,\n                    defaultPadding,\n                    false,\n                    feature,\n                  );\n                  if (\n                    declutterTree &&\n                    declutterMode === 'declutter' &&\n                    declutterTree.collides(dimensions.declutterBox)\n                  ) {\n                    break drawChars;\n                  }\n                  replayImageOrLabelArgs.push([\n                    context,\n                    scaledCanvasSize,\n                    label,\n                    dimensions,\n                    1,\n                    null,\n                    null,\n                  ]);\n                }\n              }\n              if (declutterTree && declutterMode !== 'none') {\n                declutterTree.load(replayImageOrLabelArgs.map(getDeclutterBox));\n              }\n              for (let i = 0, ii = replayImageOrLabelArgs.length; i < ii; ++i) {\n                this.replayImageOrLabel_.apply(this, replayImageOrLabelArgs[i]);\n              }\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.END_GEOMETRY:\n          if (featureCallback !== undefined) {\n            feature = /** @type {import(\"../../Feature.js\").FeatureLike} */ (\n              instruction[1]\n            );\n            const result = featureCallback(\n              feature,\n              currentGeometry,\n              declutterMode,\n            );\n            if (result) {\n              return result;\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.FILL:\n          if (batchSize) {\n            pendingFill++;\n          } else {\n            this.fill_(context);\n          }\n          ++i;\n          break;\n        case CanvasInstruction.MOVE_TO_LINE_TO:\n          d = /** @type {number} */ (instruction[1]);\n          dd = /** @type {number} */ (instruction[2]);\n          x = pixelCoordinates[d];\n          y = pixelCoordinates[d + 1];\n          context.moveTo(x, y);\n          prevX = (x + 0.5) | 0;\n          prevY = (y + 0.5) | 0;\n          for (d += 2; d < dd; d += 2) {\n            x = pixelCoordinates[d];\n            y = pixelCoordinates[d + 1];\n            roundX = (x + 0.5) | 0;\n            roundY = (y + 0.5) | 0;\n            if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {\n              context.lineTo(x, y);\n              prevX = roundX;\n              prevY = roundY;\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.SET_FILL_STYLE:\n          this.alignAndScaleFill_ = instruction[2];\n\n          if (pendingFill) {\n            this.fill_(context);\n            pendingFill = 0;\n            if (pendingStroke) {\n              context.stroke();\n              pendingStroke = 0;\n            }\n          }\n\n          /** @type {import(\"../../colorlike.js\").ColorLike} */\n          context.fillStyle = instruction[1];\n          ++i;\n          break;\n        case CanvasInstruction.SET_STROKE_STYLE:\n          if (pendingStroke) {\n            context.stroke();\n            pendingStroke = 0;\n          }\n          this.setStrokeStyle_(context, /** @type {Array<*>} */ (instruction));\n          ++i;\n          break;\n        case CanvasInstruction.STROKE:\n          if (batchSize) {\n            pendingStroke++;\n          } else {\n            context.stroke();\n          }\n          ++i;\n          break;\n        default: // consume the instruction anyway, to avoid an infinite loop\n          ++i;\n          break;\n      }\n    }\n    if (pendingFill) {\n      this.fill_(context);\n    }\n    if (pendingStroke) {\n      context.stroke();\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import('../../size.js').Size} scaledCanvasSize Scaled canvas size.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\n   * @param {import(\"rbush\").default<DeclutterEntry>} [declutterTree] Declutter tree.\n   */\n  execute(\n    context,\n    scaledCanvasSize,\n    transform,\n    viewRotation,\n    snapToPixel,\n    declutterTree,\n  ) {\n    this.viewRotation_ = viewRotation;\n    this.execute_(\n      context,\n      scaledCanvasSize,\n      transform,\n      this.instructions,\n      snapToPixel,\n      undefined,\n      undefined,\n      declutterTree,\n    );\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {FeatureCallback<T>} [featureCallback] Feature callback.\n   * @param {import(\"../../extent.js\").Extent} [hitExtent] Only check\n   *     features that intersect this extent.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  executeHitDetection(\n    context,\n    transform,\n    viewRotation,\n    featureCallback,\n    hitExtent,\n  ) {\n    this.viewRotation_ = viewRotation;\n    return this.execute_(\n      context,\n      [context.canvas.width, context.canvas.height],\n      transform,\n      this.hitDetectionInstructions,\n      true,\n      featureCallback,\n      hitExtent,\n    );\n  }\n}\n\nexport default Executor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}